Featueres
---------
async_testing.run: rethink args to run's callback (make them more useful)
async_testing.run: make it so run can take any combination of the following...
  -> filename, options object, ARGV array (which can have filenames)
  (in any order) (before it's callback)
  The order that they are specified designated importance, latter are more important
  Example:
    async_testing.run(process.ARGV.slice(1)) // normal case
    async_testing.run({parallel: true}, process.ARGV.slice(1)) // parallel by default
    async_testing.run({parallel: true}, 'somefile.js', process.ARGV.slice(1)) //specific file
    async_testing.run(process.ARGV.slice(1), {parallel: true}) // parallel no matter what
  and so on

Wrap: don't output the suiteSetup/suiteTeardown functions in the toString for a test

Console Runner: readd number of completed tests back to summary in console runner
Console Runner: are we being too redundant when 

Web Runner: checkbox for web runner to automatically run suites on window or tab focus
Web Runner: keep track of which suites have been opened and are parallel across refreshes
Web Runner: checkbox to run suites in parallel or not (right now you have to specify this
  via the command line)
Web Runner: Instead of just show test as blank when a file changes, mention something?
Web Runner: Show number of failures when the test is closed?

code coverage
test.finish can take error? so you could say do:
  fs.readFile(test.finish)
  to make sure that readFile doesn't error
timeout for suites
improve stack traces for assertions failures (remove first line, which is just the
  wrapped assertion being called)

Docs
----
update comments in lib/testing for changes to...
  runSuite (tests functions can be arrays)
  runFile
add note to doc for runSuite about it being the only thing running at any given time
update doc about expandFiles' return value for path, it is a module path
update doc about errors while running tests
document onSuiteLoadError
document run's callback
